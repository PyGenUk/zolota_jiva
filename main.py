
from time import localtime, strftime
import requests
import asyncio
from aiogram import Bot, Dispatcher, executor, types
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext

import pandas as pd

from databases import User, Tasks

# For tests: 5390773324:AAHdwxZ0ktlIME0eU3_9Znc5ewaJHaVo64U
# Working: 5372598363:AAGVj7WRjJo22Bdd5r-U9-SShOntoz9wr-U
bot = Bot(token="5372598363:AAGVj7WRjJo22Bdd5r-U9-SShOntoz9wr-U")

storage = MemoryStorage()
dp = Dispatcher(bot, storage = storage)


API_KEY = "HLnJFYqPEJiDPxRvovIxFpadsVXGGHXt"
ENDPOINT = "https://api.bestupvotes.com/v1/tasks/"
HEADERS = {"Authorization": f"Bearer {API_KEY}"}
EMOTICONS = ["üéâ", "ü•≥", "üï∫", "ü´°", "üíÉüèª"]
emoticons_number = 0
NUMBERS_LIST = [1, 2, 3, 4, 5, 6, 7, 8, 9]

start_buttons = ["/Add", "/Balance", "/Tasks", "/Yesterday_tasks"]
start_keyboard = types.ReplyKeyboardMarkup(resize_keyboard = True)
start_keyboard.add(*start_buttons)

user = User()
tasks_bd = Tasks()

@dp.message_handler(commands = ['start', "help"])
async def start(message: types.Message):
    if user.get_id(message.from_user.id) is None:
        user.add_user(message.from_user.id, message.from_user.first_name)

    await message.answer(
        f"üëã –ü—Ä–∏–≤–µ—Ç {message.from_user.first_name}! –Ø –ø–ª–∞—Ç–Ω—ã–π –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –ø–æ–º–æ–≥–∞—Ç—å —Ç–µ–±–µ –∞–ø–≤–æ—É—Ç–∏—Ç—å "
        "–∏–ª–∏ –¥–∞—É–Ω–≤–æ—É—Ç–∏—Ç—å –ø–æ—Å—Ç—ã –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –Ω–∞ Reddit!\n\n–ß—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ, –Ω–∞–ø–∏—à–∏ –∏–ª–∏ –Ω–∞–∂–º–∏ "
        "–Ω–∞ –∫–æ–º–∞–Ω–¥—É /add\n–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Å–≤–æ–π –±–∞–ª–∞–Ω—Å, –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /balance\n–ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ "
        "–∑–∞–¥–∞–Ω–∏–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /tasks", reply_markup=start_keyboard)


@dp.message_handler(commands = ["balance"])
async def start(message: types.Message):
    balance_now = user.get_balance(message.from_user.id)
    await message.answer(f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {balance_now}")


async def take_tasks(message, list_of_tasks, today_or_yesterday):
    cash_result = ""
    cash_check = 0

    for i in range(len(list_of_tasks)):
        if int(i) / 10 in NUMBERS_LIST:
            if cash_check == 0:
                await message.answer(f"üìù –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π –∑–∞ {today_or_yesterday}:\n\n" + cash_result,
                                     disable_web_page_preview = True)
            else:
                await message.answer(cash_result, disable_web_page_preview = True)
            cash_result = ""
            cash_check = 1

        data_need = str(list_of_tasks[i][10])[:4] + "." + str(list_of_tasks[i][10])[4:]
        data_need = data_need[:7] + "." + data_need[7:]
        cash_result = cash_result + f"""{i + 1}) –°—Å—ã–ª–∫–∞: {list_of_tasks[i][3]}\n–ö–æ–ª-–≤–æ –≥–æ–ª–æ—Å–æ–≤: {list_of_tasks[i][4]}\n–¢–∏–ø –∑–∞–¥–∞–Ω–∏—è: {list_of_tasks[i][5]}\n–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è: {list_of_tasks[i][6]}\n–¶–µ–ª–µ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è: {list_of_tasks[i][7]}\n–í—Ä–µ–º—è –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è –ø–æ—Å—Ç–∞: {list_of_tasks[i][8]}\n–í—Ä–µ–º—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: {list_of_tasks[i][9]}   {data_need}\n\n"""
    if cash_result != "":
        if cash_check == 0:
            if today_or_yesterday == "—Å–µ–≥–æ–¥–Ω—è":
                await message.answer(
                    f"üìù –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π –∑–∞ {today_or_yesterday}:\n\n" + cash_result + "–í—Å–µ –∑–∞–¥–∞–Ω–∏—è –∑–∞ –≤—á–µ—Ä–∞: /yesterday_tasks",
                    disable_web_page_preview = True)
            else:
                await message.answer(f"üìù –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π –∑–∞ {today_or_yesterday}:\n\n" + cash_result,
                    disable_web_page_preview = True)
        else:
            if today_or_yesterday == "—Å–µ–≥–æ–¥–Ω—è":
                await message.answer(cash_result + "–í—Å–µ –∑–∞–¥–∞–Ω–∏—è –∑–∞ –≤—á–µ—Ä–∞: /Yesterday_tasks",
                    disable_web_page_preview = True)
            else:
                await message.answer(cash_result, disable_web_page_preview = True)
    else:
        await message.answer(f"–í—ã –µ—â—ë –Ω–µ –∑–∞–ø—É—Å–∫–∞–ª–∏ –∑–∞–¥–∞–Ω–∏—è {today_or_yesterday} ü•≤")


@dp.message_handler(commands = ["tasks"])
async def tasks(message: types.Message):
    list_of_tasks = []
    g = localtime()
    time_now = strftime("%Y%m%d", g)

    for i in tasks_bd.get_tasks(message.chat.id, time_now):
        list_of_tasks.append(i)

    await take_tasks(message, list_of_tasks, "—Å–µ–≥–æ–¥–Ω—è")


@dp.message_handler(commands = ["yesterday_tasks"])
async def tasks(message: types.Message):
    list_of_tasks = []
    g = localtime()
    time_now = strftime("%Y%m%d", g)

    for i in tasks_bd.get_tasks(message.chat.id, str(int(time_now)-1)):
        list_of_tasks.append(i)

    await take_tasks(message, list_of_tasks, "–≤—á–µ—Ä–∞")


@dp.message_handler(commands = ["SanyaVerniSotkyBojeYyackeKonchene_excel"])
async def excel(message: types.Message):
    g = localtime()
    time_now = strftime("%H:%M %d.%m.%Y", g)

    df = pd.read_sql_query("SELECT * FROM tasks_of_users", tasks_bd.db2)
    df.to_excel(f'All tasks {time_now} .xlsx', index = False)
    await message.reply_document(open(f'All tasks {time_now} .xlsx', 'rb'))


"""********************************** –ù–∞—á–∞–ª–æ –æ–ø—Ä–æ—Å–∞ –¥–ª—è –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è —Ä–∞—Ö—É–Ω–∫—ñ–≤ ****************************************"""


class Balance_up_form(StatesGroup):
    ID = State()
    NUMBER_OF_VOICES = State()


@dp.message_handler(state = '*', commands = 'stop')
@dp.message_handler(Text(equals = 'stop', ignore_case = True), state = '*')
async def cancel_handler(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        return
    await state.finish()
    await message.reply('Stoped')


@dp.message_handler(commands = 'SanyaVerniSotkyBojeYyackeKonchene', state = None)
async def balance_up_form_start(message: types.Message):
    await Balance_up_form.ID.set()

    await message.answer("–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:")
    result = ""
    print(user.get_all_users())
    for value in user.get_all_users():
        print(value)
        result = result + str(value)[1:-1].replace(",", " |") + "\n"
    await message.answer(result)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")


@dp.message_handler(state = Balance_up_form.ID)
async def take_id_selected_user(message: types.Message, state: FSMContext):
    if user.get_id(message.text) is None:
        await message.answer("–¢–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç:")
    else:
        async with state.proxy() as data:
            data['ID'] = message.text
        await Balance_up_form.next()
        await message.answer("üíµ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª-–≤–æ –≥–æ–ª–æ—Å–æ–≤, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∏–ª–∏ —É–±—Ä–∞—Ç—å:")


@dp.message_handler(state = Balance_up_form.NUMBER_OF_VOICES)
async def take_number_of_voices(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        id_selected_user = data['ID']
    balance_now = user.get_balance(id_selected_user)
    try:
        int(message.text)
    except:
        return await message.answer("–í—ã –≤–≤–µ–ª–∏ –Ω–µ —á–∏—Å–ª–æ!")

    user.set_balance(id_selected_user, balance_now + int(message.text))
    if int(message.text) > 0:
        await message.answer("–î–æ–±–∞–≤–ª–µ–Ω–æ")
        await bot.send_message(id_selected_user, f"‚úÖ –í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {message.text} –≥–æ–ª–æ—Å–æ–≤!")
    elif int(message.text) == 0:
        await message.answer("–ó–∞—á–µ–º 0?")
    else:
        await message.answer("–£–±—Ä–∞–Ω–æ")
    await state.finish()


"""********************************** –ù–∞—á–∞–ª–æ –æ–ø—Ä–æ—Å–∞ –¥–ª—è –∑–∞–≤–¥–∞–Ω–Ω—è ***************************************************"""


class Task_form(StatesGroup):
    URL = State()
    NUMBER_OF_VOICES = State()
    FUNCTION = State()
    POSITION_TARGET = State()
    HOLD_HOURS = State()
    MIN_TIME = State()



@dp.message_handler(state = '*', commands = 'stop')
@dp.message_handler(Text(equals = 'stop', ignore_case = True), state = '*')
async def cancel_handler(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        return
    await state.finish()
    await message.reply('Stoped')


@dp.message_handler(commands = 'add', state = None)
async def form_start(message: types.Message):
    await Task_form.URL.set()
    await message.answer(
        "üåé –í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ—Å—Ç –∏–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: \n\n(–í—ã –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /stop)", )


@dp.message_handler(state=Task_form.URL)
async def take_url(message: types.Message, state: FSMContext):
    if message.text[0:25] == "https://www.reddit.com/r/" or message.text[0:28] == "https://www.reddit.com/user/":
        async with state.proxy() as data:
            data['URL'] = message.text
        await Task_form.next()

        balance_now = user.get_balance(message.from_user.id)
        await message.answer(f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–ª–æ—Å–æ–≤ –æ—Ç 7 –¥–æ 1500 (–í–∞—à –±–∞–ª–∞–Ω—Å {balance_now})")
    else:
        return await message.answer(
            text = """üö´ –í—ã –≤–≤–µ–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É (URL –¥–æ–ª–∂–Ω–∞ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è –Ω–∞ https://www.reddit.com/r/ –∏–ª–∏  https://www.reddit.com/user/) """,
            disable_web_page_preview = True)


@dp.message_handler(state=Task_form.NUMBER_OF_VOICES)
async def take_number_of_voices(message: types.Message, state: FSMContext):
    if message.text.isdigit():
        if 1500 >= int(message.text) >= 7:
            balance_now = user.get_balance(message.from_user.id)
            if balance_now >= int(message.text):
                async with state.proxy() as data:
                    data['NUMBER_OF_VOICES'] = message.text
                await Task_form.next()
                markup = types.ReplyKeyboardMarkup(resize_keyboard = True, selective = True)
                markup.add("+", "-")
                await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é: ‚ûï (–¥–ª—è upvote) –∏–ª–∏ ‚ûñ (–¥–ª—è downvote)", reply_markup = markup)
            else:
                return await message.answer("""üö´ –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≥–æ–ª–æ—Å–æ–≤""")
        else:
            return await message.answer("""üö´ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–ª–æ—Å–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 7 –¥–æ 1500!""")
    else:
        return await message.answer("""üö´ –ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–ª–æ—Å–æ–≤ –æ—Ç 7 –¥–æ 1500!""")


@dp.message_handler(state=Task_form.FUNCTION)
async def take_function(message: types.Message, state: FSMContext):
    if message.text in ["+", "-"]:
        async with state.proxy() as data:
            data['FUNCTION'] = message.text
        await Task_form.next()

        await message.answer("""üéØ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–µ–≤—É—é –ø–æ–∑–∏—Ü–∏—é –æ—Ç 1 –¥–æ 10. –ó–∞–¥–∞–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –ø–æ–∑–∏—Ü–∏—è –≤ HOT –±—É–¥–µ—Ç –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞. –ï—Å–ª–∏ –≤—ã –Ω–µ —Ö–æ—Ç–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é, –≤–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ 0""")
    else:
        return await message.answer("üö´ –ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏! ‚ûï –∏–ª–∏ ‚ûñ !!!")


@dp.message_handler(state=Task_form.POSITION_TARGET)
async def take_position_target(message: types.Message, state: FSMContext):
    if message.text.isdigit():
        if 10 >= int(message.text) >= 0:
            async with state.proxy() as data:
                data['POSITION_TARGET'] = int(message.text)
            await Task_form.next()

            await message.answer("""ü§º‚è≥ –£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è –ø–æ—Å—Ç–∞ –Ω–∞ —Ü–µ–ª–µ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏ –æ—Ç 1 –¥–æ 24 —á–∞—Å–æ–≤.\n–¢–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º –µ—Å–ª–∏ –ø–æ—Å—Ç –Ω–∞—á–Ω–µ—Ç –ø–∞–¥–∞—Ç—å –≤ HOT, –Ω–∞–∫—Ä—É—Ç–∫–∞ –±—É–¥–µ—Ç –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∞, –∞ –∑–∞—Ç–µ–º –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –ø–æ—Å—Ç –≤–µ—Ä–Ω–µ—Ç—Å—è –Ω–∞ –∑–∞–¥–∞–Ω–Ω—É—é —Ä–∞–Ω–µ–µ —Ü–µ–ª–µ–≤—É—é –ø–æ–∑–∏—Ü–∏—é. –≠—Ç–æ—Ç –ø—Ä–æ—Ü–µ—Å—Å –±—É–¥–µ—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å –ø–æ –∫—Ä—É–≥—É, –ø–æ–∫–∞ –Ω–µ –∏—Å—Ç–µ—á–µ—Ç –∑–∞–¥–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –∏–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–ø–≤–æ—É—Ç–æ–≤ –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–µ –ø–æ–¥ –¥–∞–Ω–Ω—É—é –∑–∞–¥–∞—á—É. –ï—Å–ª–∏ –ø–æ—Å—Ç –Ω–µ –Ω—É–∂–Ω–æ —É–¥–µ—Ä–∂–∏–≤–∞—Ç—å, —Ç–æ –≤–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ 0.""")
        else:
            return await message.answer(
                text="""üö´ –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 10!""",
                disable_web_page_preview=True)
    else:
        return await message.answer("""üö´ –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 10!""")

@dp.message_handler(state=Task_form.HOLD_HOURS)
async def take_hold_hours(message: types.Message, state: FSMContext):
    if message.text.isdigit():
        if 24 >= int(message.text) >= 0:
            async with state.proxy() as data:
                data['HOLD_HOURS'] = int(message.text)
            await Task_form.next()

            markup = types.ReplyKeyboardMarkup(resize_keyboard=True, selective=True)
            markup.add("15 secs", "20 secs", "30 secs", "40 secs", "60 secs", "90 secs", "2 mins", "3 mins", "5 mins",
                       "10 mins", "20 mins", "30 mins")
            await message.answer("‚è≥–í—ã–±–µ—Ä–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –º–µ–∂–¥—É –≥–æ–ª–æ—Å–∞–º–∏, –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –Ω–µ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç—Å—è",
                                 reply_markup = markup)
        else:
            return await message.answer(
                text="""üö´ –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 24!""",
                disable_web_page_preview=True)
    else:
        return await message.answer("""üö´ –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 24!""")

@dp.message_handler(lambda message: message.text not in ["15 secs", "20 secs", "30 secs", "40 secs",
                                    "60 secs", "90 secs", "2 mins", "3 mins", "5 mins",
                       "10 mins", "20 mins", "30 mins"], state = Task_form.MIN_TIME)
async def process_gender_invalid(message: types.Message):
    return await message.answer("–ù–∞–∂–º–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∞ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫!")


@dp.message_handler(state = Task_form.MIN_TIME)
async def take_min_time(message: types.Message, state: FSMContext):
    split = message.text.split()
    async with state.proxy() as data:
        if split[1] == "mins":
            data['MIN_TIME'] = int(split[0]) * 60
        else:
            data['MIN_TIME'] = int(split[0])
        if data["FUNCTION"] == "+":
            result_func = "upvote"
        else:
            result_func = "downvote"

        body = {"url": str(data['URL']),
                "votes": int(data['NUMBER_OF_VOICES']),
                "wait": int(data['MIN_TIME']),
                "position_target": int(data["POSITION_TARGET"]),
                "hold_hours": int(data["HOLD_HOURS"]),
                "type": "post"}
        api_request = requests.post(ENDPOINT, data=body, headers=HEADERS).json()

        print(str(api_request))
        if str(api_request["success"]) == "True":
            global emoticons_number
            emoticons_number += 1

            balance_now = user.get_balance(message.from_user.id)

            await bot.send_message(1680516364,
                                   f"""{EMOTICONS[emoticons_number % 5]} –ó–∞–¥–∞–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ!\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.first_name} (@{message.from_user.username})\n–°—Å—ã–ª–∫–∞: {data['URL']}\n–ö–æ–ª-–≤–æ –≥–æ–ª–æ—Å–æ–≤: {data['NUMBER_OF_VOICES']}\n–¢–∏–ø –∑–∞–¥–∞–Ω–∏—è: {result_func}\n–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è: {message.text}\n\nüí∞–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {balance_now - int(data['NUMBER_OF_VOICES'])}
                                                                       """, disable_web_page_preview = True)
            await bot.send_message(2136724237,
                                   f"""–í—Å—Ç–∞–≤–∞–π –¥–∞–≤–∞–π""", disable_web_page_preview = True)
            await message.answer(
                f"""{EMOTICONS[emoticons_number % 5]} –ó–∞–¥–∞–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ!\n\n–°—Å—ã–ª–∫–∞: {data['URL']}\n–ö–æ–ª-–≤–æ –≥–æ–ª–æ—Å–æ–≤: {data['NUMBER_OF_VOICES']}\n–¢–∏–ø –∑–∞–¥–∞–Ω–∏—è: {result_func}\n–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è: {message.text}\n–¶–µ–ª–µ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è: {data["POSITION_TARGET"]}\n–í—Ä–µ–º—è –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è –ø–æ—Å—Ç–∞: {data["HOLD_HOURS"]}\n\nüí∞–í–∞—à –±–∞–ª–∞–Ω—Å: {balance_now - int(data['NUMBER_OF_VOICES'])}""", reply_markup = start_keyboard)

            user.set_balance(message.from_user.id, balance_now - int(data['NUMBER_OF_VOICES']))

            g = localtime()
            time_now = strftime("%H:%M:%Y:%m:%d", g)
            time_split = time_now.split(":")
            if 21 > int(time_split[0]) > 6:
                time_split[0] = str((int(time_split[0]) + 3))
                cash = ":".join(time_split)
                cash = cash[:5] + " " + cash[5 + 1:]
                time_need = cash.split(" ")
            else:
                time_split[0] = "0" + str((int(time_split[0]) + 3) % 24)
                cash = ":".join(time_split)
                cash = cash[:5] + " " + cash[5 + 1:]
                time_need = cash.split(" ")

            tasks_bd.set_task(str(message.from_user.id),
                              str(message.from_user.first_name),
                              str(message.from_user.username),
                              str(data['URL']), str(data['NUMBER_OF_VOICES']),
                              str(result_func),
                              str(message.text),
                              str(data["POSITION_TARGET"]),
                              str(data["HOLD_HOURS"]),
                              str(time_need[0]),
                              str(time_need[1].replace(":", "")))
        else:
            try:
                if api_request.get("error").get("message") == "Task with this URL exists and already running.":
                    await bot.send_message(1680516364, f"""–ó–ê–î–ê–ù–ò–Ø –ó–ê–ü–£–©–ï–ù–û –ü–û–í–¢–û–†–ù–û!""")
                elif api_request.get("error").get("message") == "Insufficient points left for this task. You need to wait for the completion of all tasks to see the real points balance.":
                    await bot.send_message(1680516364,f"""–ù–ï–î–û–°–¢–ê–¢–û–ß–ù–û –ë–ê–õ–ê–ù–°–ê –î–õ–Ø –≠–¢–û–ì–û –ó–ê–î–ê–ù–ò–Ø""")
            except:
                await bot.send_message(986219819, "–ü–û–ü–ê–î–û–° –Ü–î–ò –í–ò–ü–ü–†–ê–í–õ–Ø–ô")

            await bot.send_message(1680516364, f"""{EMOTICONS[emoticons_number % 5]} –ó–∞–¥–∞–Ω–∏–µ –ù–ï –ø—Ä–∏–Ω—è—Ç–æ!\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.first_name} (@{message.from_user.username})\n–°—Å—ã–ª–∫–∞: {data['URL']}\n–ö–æ–ª-–≤–æ –≥–æ–ª–æ—Å–æ–≤: {data['NUMBER_OF_VOICES']}\n–¢–∏–ø –∑–∞–¥–∞–Ω–∏—è: {result_func}\n–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è: {message.text}""", disable_web_page_preview = True)
            # await message.answer("""üìõ –ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ, –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ª–∏ —É–∫–∞–∑–∞–Ω–∞ —Å—Å—ã–ª–∫–∞.""", )

    await state.finish()


if __name__ == '__main__':
    loop = asyncio.get_event_loop()
    executor.start_polling(dp)
